AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  Resignator Service

Parameters:

#  CognitoDomain:
#    Type: String
#    Description: A name for the cognito Domain
#    Default: "firefighter-cheatsheet-service"

  S3Bucket:
    Type: String
    Description: Parameter to specify the S3 Bucket to use for deployment

  FrontendDeployment:
    Default: remote
    Type: String
    AllowedValues:
      - local
      - remote
    ConstraintDescription: Must specify 'local' or 'remote' for FrontendDeployment.

Conditions:
  DeployCloudFront: !Equals
    - !Ref FrontendDeployment
    - remote

Globals:
  Function:
    Timeout: 20

  Api:
    Cors:
      AllowMethods: "'GET,POST,PUT,DELETE,OPTIONS'"
      AllowHeaders: "'content-type,authorization'"
      AllowOrigin: "'*'"
    Auth:
      DefaultAuthorizer: CognitoAuthorizer
      AddDefaultAuthorizerToCorsPreflight: false
      Authorizers:
        CognitoAuthorizer:
          UserPoolArn: !GetAtt UserPool.Arn

Resources:

  #-----------------------------------------------------
  # Cognito Configuration for user management
  #-----------------------------------------------------

#  UserPool:
#    Type: AWS::Cognito::UserPool
#    Properties:
#      AccountRecoverySetting:
#        RecoveryMechanisms:
#          - Name: verified_email
#            Priority: 1
#      UsernameAttributes:
#        - email
#      UsernameConfiguration:
#        CaseSensitive: false
#      AutoVerifiedAttributes:
#        - email
#      UserPoolName: !Sub ${CognitoDomain}-user-pool
#      Schema:
#        - Name: email
#          AttributeDataType: String
#          Mutable: false
#          Required: true
#        - Name: name
#          AttributeDataType: String
#          Mutable: true
#          Required: true
#
#  UserPoolClient:
#    Type: AWS::Cognito::UserPoolClient
#    Properties:
#      UserPoolId: !Ref UserPool
#      AllowedOAuthFlowsUserPoolClient: true
#      CallbackURLs:
#        - !If
#          - DeployCloudFront
#          - !Sub "https://${CloudfrontDistribution.DomainName}"
#          - http://localhost:8000
#      LogoutURLs:
#        - !If
#          - DeployCloudFront
#          - !Sub "https://${CloudfrontDistribution.DomainName}"
#          - http://localhost:8000
#      AllowedOAuthFlows:
#        - code
#        - implicit
#      AllowedOAuthScopes:
#        - phone
#        - email
#        - openid
#        - profile
#      SupportedIdentityProviders:
#        - COGNITO
#      PreventUserExistenceErrors: ENABLED
#
#  UserPoolDomain:
#    Type: AWS::Cognito::UserPoolDomain
#    Properties:
#      Domain: !Ref CognitoDomain
#      UserPoolId: !Ref UserPool


  #-----------------------------------------------------
  # CloudFront Configuration
  #-----------------------------------------------------

  CloudFrontOriginAccessIdentity:
    Type: 'AWS::CloudFront::CloudFrontOriginAccessIdentity'
    Condition: DeployCloudFront
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: 'Serverless frontend website'

  CloudfrontDistribution:
    Type: "AWS::CloudFront::Distribution"
    Condition: DeployCloudFront
    Properties:
      DistributionConfig:
        Comment: "Cloudfront distribution for serverless website"
        DefaultRootObject: "index.html"
        Enabled: true
        HttpVersion: http2
        PriceClass: PriceClass_100
        # List of origins that Cloudfront will connect to
        Origins:
          - Id: s3-website
            DomainName: !Sub "${S3Bucket}.s3.us-east-2.amazonaws.com"
            OriginPath: /static
            S3OriginConfig:
              # Restricting Bucket access through an origin access identity
              OriginAccessIdentity:
                Fn::Sub: 'origin-access-identity/cloudfront/${CloudFrontOriginAccessIdentity}'
        # To connect the CDN to the origins you need to specify behaviours
        DefaultCacheBehavior:
          # Compress resources automatically ( gzip )
          Compress: 'true'
          AllowedMethods:
            - GET
            - HEAD
            - OPTIONS
          ForwardedValues:
            QueryString: false
          TargetOriginId: s3-website
          ViewerProtocolPolicy : redirect-to-https
          CachePolicyId: 4135ea2d-6df8-44a3-9df3-4b5a84be39ad

  S3BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Condition: DeployCloudFront
    Properties:
      Bucket: !Ref S3Bucket
      PolicyDocument:
        # Restricting access to cloudfront only.
        Statement:
          -
            Effect: Allow
            Action: 's3:GetObject'
            Resource:
              - !Sub "arn:aws:s3:::${S3Bucket}/*"
            Principal:
              AWS: !Sub "arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity ${CloudFrontOriginAccessIdentity}"


  #-----------------------------------------------------
  # Role/Permissions/Policy Configuration
  #-----------------------------------------------------

  AccessRole:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaRole'
        - 'arn:aws:iam::aws:policy/AWSLambdaExecute'
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: 'WriteToCloudWatch'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - cloudwatch:PutMetricData
                Resource: '*'
        - PolicyName: 'AccessApparatusTable'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: dynamodb:*
                Resource: !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/apparatus"
        - PolicyName: 'AccessCoefficientTable'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: dynamodb:*
                Resource: !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/coefficient"
        - PolicyName: 'FireDeptAndAppTypeNumIndex'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: dynamodb:*
                Resource: !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/apparatus/index/*"
        - PolicyName: 'AccessConstantsTable'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: dynamodb:*
                Resource: !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/constants"

  #-----------------------------------------------------
  # Lambda Functions Configuration
  #-----------------------------------------------------

  GetApparatusLambda:
    Type: AWS::Serverless::Function
    Properties:
      Role: !GetAtt AccessRole.Arn
      CodeUri: FirefighterCheatsheetServiceLambda
      Handler: com.nashss.se.firefightercheatsheetservice.Lambda.GetApparatusLambda::handleRequest
      Runtime: java11
      Architectures:
        - x86_64
      MemorySize: 512
      Environment:
        Variables:
          JAVA_TOOL_OPTIONS: -XX:+TieredCompilation -XX:TieredStopAtLevel=1
      Events:
        FirefighterCheatsheetService:
          Type: Api
          Properties:
            Path: /apparatus
            Method: get

  DeleteApparatusLambda:
    Type: AWS::Serverless::Function
    Properties:
      Role: !GetAtt AccessRole.Arn
      CodeUri: FirefighterCheatsheetServiceLambda
      Handler: com.nashss.se.firefightercheatsheetservice.Lambda.DeleteApparatusLambda::handleRequest
      Runtime: java11
      Architectures:
        - x86_64
      MemorySize: 512
      Environment:
        Variables:
          JAVA_TOOL_OPTIONS: -XX:+TieredCompilation -XX:TieredStopAtLevel=1
      Events:
        FirefighterCheatsheetService:
          Type: Api
          Properties:
            Path: /apparatus/{apparatusTypeAndNumber}/
            Method: delete

  AddApparatusLambda:
    Type: AWS::Serverless::Function
    Properties:
      Role: !GetAtt AccessRole.Arn
      CodeUri: FirefighterCheatsheetServiceLambda
      Handler: com.nashss.se.firefightercheatsheetservice.Lambda.AddApparatusLambda::handleRequest
      Runtime: java11
      Architectures:
        - x86_64
      MemorySize: 512
      Environment:
        Variables:
          JAVA_TOOL_OPTIONS: -XX:+TieredCompilation -XX:TieredStopAtLevel=1
      Events:
        FirefighterCheatsheetService:
          Type: Api
          Properties:
            Path: /apparatus
            Method: post

  GetIndividualApparatusLambda:
    Type: AWS::Serverless::Function
    Properties:
      Role: !GetAtt AccessRole.Arn
      CodeUri: FirefighterCheatsheetServiceLambda
      Handler: com.nashss.se.firefightercheatsheetservice.Lambda.GetIndividualApparatusLambda::handleRequest
      Runtime: java11
      Architectures:
        - x86_64
      MemorySize: 512
      Environment:
        Variables:
          JAVA_TOOL_OPTIONS: -XX:+TieredCompilation -XX:TieredStopAtLevel=1
      Events:
        FirefighterCheatsheetService:
          Type: Api
          Properties:
            Path: /apparatus/individual
            Method: get

  DeleteHoseLambda:
    Type: AWS::Serverless::Function
    Properties:
      Role: !GetAtt AccessRole.Arn
      CodeUri: FirefighterCheatsheetServiceLambda
      Handler: com.nashss.se.firefightercheatsheetservice.Lambda.DeleteHoseLambda::handleRequest
      Runtime: java11
      Architectures:
        - x86_64
      MemorySize: 512
      Environment:
        Variables:
          JAVA_TOOL_OPTIONS: -XX:+TieredCompilation -XX:TieredStopAtLevel=1
      Events:
        FirefighterCheatsheetService:
          Type: Api
          Properties:
            Path: /apparatus/hose
            Method: delete

  AddHoseLambda:
    Type: AWS::Serverless::Function
    Properties:
      Role: !GetAtt AccessRole.Arn
      CodeUri: FirefighterCheatsheetServiceLambda
      Handler: com.nashss.se.firefightercheatsheetservice.Lambda.AddHoseLambda::handleRequest
      Runtime: java11
      Architectures:
        - x86_64
      MemorySize: 512
      Environment:
        Variables:
          JAVA_TOOL_OPTIONS: -XX:+TieredCompilation -XX:TieredStopAtLevel=1
      Events:
        FirefighterCheatsheetService:
          Type: Api
          Properties:
            Path: /apparatus/hose
            Method: put

  GetConstantsLambda:
    Type: AWS::Serverless::Function
    Properties:
      Role: !GetAtt AccessRole.Arn
      CodeUri: FirefighterCheatsheetServiceLambda
      Handler: com.nashss.se.firefightercheatsheetservice.Lambda.GetConstantsLambda::handleRequest
      Runtime: java11
      Architectures:
        - x86_64
      MemorySize: 512
      Environment:
        Variables:
          JAVA_TOOL_OPTIONS: -XX:+TieredCompilation -XX:TieredStopAtLevel=1
      Events:
        FirefighterCheatsheetService:
          Type: Api
          Properties:
            Path: /constants
            Method: get

  #-----------------------------------------------------
  # DynamoDB Configuration
  #-----------------------------------------------------

  ApparatusTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: "userName"
          AttributeType: "S"
        - AttributeName: "fireDept"
          AttributeType: "S"
        - AttributeName: "apparatusTypeAndNumber"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "userName"
          KeyType: "HASH"
        - AttributeName: "apparatusTypeAndNumber"
          KeyType: "RANGE"
      BillingMode: "PAY_PER_REQUEST"
      TableName: "apparatus"
      GlobalSecondaryIndexes:
        - IndexName: "FireDeptAndAppTypeNumIndex"
          KeySchema:
            - AttributeName: "fireDept"
              KeyType: "HASH"
            - AttributeName: "apparatusTypeAndNumber"
              KeyType: "RANGE"
          Projection:
            ProjectionType: "ALL"

  CoefficientTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: "hoseDiameter"
          AttributeType: "N"
      KeySchema:
        - AttributeName: "hoseDiameter"
          KeyType: "HASH"
      BillingMode: "PAY_PER_REQUEST"
      TableName: "coefficient"

  ConstantsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: "key"
          AttributeType: "S"
        - AttributeName: "humanValue"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "key"
          KeyType: "HASH"
        - AttributeName: "humanValue"
          KeyType: "RANGE"
      BillingMode: "PAY_PER_REQUEST"
      TableName: "constants"

#-----------------------------------------------------
# The outputs defined below will be printed
#  to the screen after a successful deploy
#-----------------------------------------------------

Outputs:

  CognitoUserPoolId:
    Value: !Ref UserPool
    Description: "The Cognito User Pool ID (COGNITO_USER_POOL_ID)."
  CognitoUserPoolClientId:
    Value: !Ref UserPoolClient
    Description: "The Cognito User Pool Client ID (COGNITO_USER_POOL_CLIENT_ID)."
  CognitoDomain:
    Value: !Sub "${CognitoDomain}.auth.us-east-2.amazoncognito.com"
    Description: "The Cognito Domain (COGNITO_DOMAIN)."

  ApiBaseUrl:
    Description: "API Gateway endpoint base URL for Prod stage (API_BASE_URL)."
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/"

  CognitoRedirectSignin:
    Description: "The URL of the deployed front-end application (COGNITO_REDIRECT_SIGNIN)."
    Value: !Sub "https://${CloudfrontDistribution.DomainName}"
    Condition: DeployCloudFront
  CognitoRedirectSignout:
    Description: "The URL of the deployed front-end application (COGNITO_REDIRECT_SIGNOUT)."
    Value: !Sub "https://${CloudfrontDistribution.DomainName}"
    Condition: DeployCloudFront


